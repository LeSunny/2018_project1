개요
=====
-----------------------------------------------------------
서비스 추상화(Service Abstraction) 개념에 대하여 공부한다.
구체적인 사례로 메일송신기능을 제공하는 JavaMail클래스와 
스프링이 제공하는 서비스추상화 인터페이스인 MailSender에
대하여 연습한다.
-----------------------------------------------------------


1. Gmail SMTP Server를 이용한 메일전송 예제 (무료 SMTP & Authentication)
	http://micropilot.tistory.com/152

2. spring - 자바메일(javamail) 예제
	http://linuxism.tistory.com/1435

===========>
<서비스 추상화 >
MySQL, Oracle,PostgreSQL, .... 등등 많은 DB들이 있음
예를 들어 한번 씩 방문할 때마다 방문빈도수를 ++1 하는 operation이 있음
컨셉으로는 동일한 서비스를 제공하지만 구현을 하기 위한 방식이 조금씩 다르다.(어플리케이션 입장에선 어차피 똑같은 서비스를 제공하니까 회사마다 다르더라도 )
=> 추상화하자
어플리케이션 --(차이점을 소화)--> 여러 DB와 연결

이 차이점을 소화하는게 서비스 추상화 하나의 유일한 인터페이스를 제공한다

제일 기본적인 추상화 레벨은 JDBC. transaction 처리에서 commit, rollback이 가장 중요한데 어느 위치에서 실패할지 추적하지를 못함. 따라서 상용화 하기에 부적절하다
-> 새로운 추상화 컴포넌트들이 등장함!

<Mail>
서로 다른 메일 서버들 사이에서 메일을 교환할 때 "SMTP 프로토콜"을 씀
메일 서버의 메일 박스가 있어서 나의 메일들이 여기에 저장이 된다. 내 것을 가져올때 쓰이는게 "POP3" 등의 프로토콜이다.

현재는 로우 레벨의 프로토콜을 상위 컴포넌트에서 수월하게 코딩할 수 있게끔 하는 Javamail을 쓴다.
Javamail : 클래스 형태로 서비스를 제공.
	   유연성, 확장성 면에선 좋지 않음. X(
	      -> 메일 기능이 있는 서버 테스트 시 메일 관련해서 변화가 일어났을 때, 아니면 새로운 회사에 투입되어 메일 관련 프로젝트를 할 때 문제가 생김
=> 해결법?
진짜 Javamail 클래스가 아닌 테스트용 가상메일서버를 투입해 테스트 하면 된다 (Mock-up : 흉내낸다)

<서비스 객체(=비지니스 객체)> ------x------> <Javamail Class>
<서비스 객체(=비지니스 객체)> -------------> <디버깅용 Mock-up Test Class>
Javamail jm();
...
jm.send(message);

=> 서비스 객체와 Javamail 클래스가 연결되어 있던 것을(xml 파일의 bean으로)
bean의 파라미터 하나만 바꾸어 mock-up Test Class와 연결한다.
-> 서비스 객체의 소스를 바꾸지 않아도 된다. (소스 분석과 고장냈을 때의 해결 부담이 없다)
===========>
1. Gmail SMTP Server를 이용한 메일전송 예제 (무료 SMTP & Authentication)
	http://micropilot.tistory.com/152
추상화 개념이 x
서비스 객체의 소스코드를 터치하지 않고선 클래스를 연결할 방법이 없음
추상화 메서드가 아니기 때문에 다른 곳에선 다른 이름으로 불려질 가능성도 있음

2. spring - 자바메일(javamail) 예제
	http://linuxism.tistory.com/1435 **** <-- 스터디!

자바메일을 대체하는 Spring 객체의 등장!
Javamail 클래스를 은폐하여 추상화 시킴 -> 바깥(어플리케이션 프로그램)에는 Javamail이 등장하진 않음
Javamail은 추상화를 고려하지 않은 순수한 클래스이고, Spring 추상화 단계를 XML로 하려 할 때 클래스가 아닌 interface 형태로 한다.**
메일기능을 제공하는 인터페이스로써!ㅎㅅㅎ

Spring 에선 추상화 인터페이스를 권장
Spring의 bean은 Spring의 클래스!
클래스(bean)는 가급 직접 못들어오게 하고 인터페이스로 공통함수를 모아 추상화 시켜주고 직접적으로 구현하게 한다.

서비스객체 -- XML -- interface(MailSender) -- DB들...

Javamail은 메일 클래스를 좀더 사용하기 쉽게 해준다. Javamail을 추상화 시켜 때에 따라 다르게 사용가능하도록, 유연성을 높혀준다.





해야할 것 )
1. 2번 스터디 - 메일
2. 인증, 보안
3. 인증 AOP 하기 전에 회원가입, 로그인 페이지 먼저 만들기 -> 메일을 보내서 받고 링크를 클릭하면 본인이 맞는 것으로(제일 간단)
