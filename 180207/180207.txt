개요
=====
-----------------------------------------------------------
서비스 추상화(Service Abstraction) 개념에 대하여 공부한다.
구체적인 사례로 메일송신기능을 제공하는 JavaMail클래스와 
스프링이 제공하는 서비스추상화 인터페이스인 MailSender에
대하여 연습한다.
-----------------------------------------------------------


1. Gmail SMTP Server를 이용한 메일전송 예제 (무료 SMTP & Authentication)
	http://micropilot.tistory.com/152

2. spring - 자바메일(javamail) 예제
	http://linuxism.tistory.com/1435

===========>
<서비스 추상화 >
MySQL, Oracle,PostgreSQL, .... 등등 많은 DB들이 있음
예를 들어 한번 씩 방문할 때마다 방문빈도수를 ++1 하는 operation이 있음
컨셉으로는 동일한 서비스를 제공하지만 구현을 하기 위한 방식이 조금씩 다르다.(어플리케이션 입장에선 어차피 똑같은 서비스를 제공하니까 회사마다 다르더라도 )
=> 추상화하자
어플리케이션 --(차이점을 소화)--> 여러 DB와 연결

이 차이점을 소화하는게 서비스 추상화 하나의 유일한 인터페이스를 제공한다

제일 기본적인 추상화 레벨은 JDBC. transaction 처리에서 commit, rollback이 가장 중요한데 어느 위치에서 실패할지 추적하지를 못함. 따라서 상용화 하기에 부적절하다
-> 새로운 추상화 컴포넌트들이 등장함!

<Mail>
서로 다른 메일 서버들 사이에서 메일을 교환할 때 "SMTP 프로토콜"을 씀
메일 서버의 메일 박스가 있어서 나의 메일들이 여기에 저장이 된다. 내 것을 가져올때 쓰이는게 "POP3" 등의 프로토콜이다.

현재는 로우 레벨의 프로토콜을 상위 컴포넌트에서 수월하게 코딩할 수 있게끔 하는 Javamail을 쓴다.
Javamail : 클래스 형태로 서비스를 제공.
	   유연성, 확장성 면에선 좋지 않음. X(
	      -> 메일 기능이 있는 서버 테스트 시 메일 관련해서 변화가 일어났을 때, 아니면 새로운 회사에 투입되어 메일 관련 프로젝트를 할 때 문제가 생김
=> 해결법?
진짜 Javamail 클래스가 아닌 테스트용 가상메일서버를 투입해 테스트 하면 된다 (Mock-up : 흉내낸다)

<서비스 객체(=비지니스 객체)> ------x------> <Javamail Class>
<서비스 객체(=비지니스 객체)> -------------> <디버깅용 Mock-up Test Class>
Javamail jm();
...
jm.send(message);

=> 서비스 객체와 Javamail 클래스가 연결되어 있던 것을(xml 파일의 bean으로)
bean의 파라미터 하나만 바꾸어 mock-up Test Class와 연결한다.
-> 서비스 객체의 소스를 바꾸지 않아도 된다. (소스 분석과 고장냈을 때의 해결 부담이 없다)
===========>
1. Gmail SMTP Server를 이용한 메일전송 예제 (무료 SMTP & Authentication)
	http://micropilot.tistory.com/152
추상화 개념이 x
서비스 객체의 소스코드를 터치하지 않고선 클래스를 연결할 방법이 없음
추상화 메서드가 아니기 때문에 다른 곳에선 다른 이름으로 불려질 가능성도 있음

2. spring - 자바메일(javamail) 예제
	http://linuxism.tistory.com/1435 **** <-- 스터디!

자바메일을 대체하는 Spring 객체의 등장!
Javamail 클래스를 은폐하여 추상화 시킴 -> 바깥(어플리케이션 프로그램)에는 Javamail이 등장하진 않음
Javamail은 추상화를 고려하지 않은 순수한 클래스이고, Spring 추상화 단계를 XML로 하려 할 때 클래스가 아닌 interface 형태로 한다.**
메일기능을 제공하는 인터페이스로써!ㅎㅅㅎ

Spring 에선 추상화 인터페이스를 권장
Spring의 bean은 Spring의 클래스!
클래스(bean)는 가급 직접 못들어오게 하고 인터페이스로 공통함수를 모아 추상화 시켜주고 직접적으로 구현하게 한다.

서비스객체 -- XML -- interface(MailSender) -- DB들...

Javamail은 메일 클래스를 좀더 사용하기 쉽게 해준다. Javamail을 추상화 시켜 때에 따라 다르게 사용가능하도록, 유연성을 높혀준다.






* 따로 복습


서비스 추상화란?
추상화란 하위 시스템의 공통점을 뽑아내서 분리시키는 것을 말합니다. 그렇게 하면 하위 시스템이 어떤 것인지 알지 못해도, 또는 하위 시스템이 바뀌더라도 일관된 방법으로 접근할 수가 있습니다.

추상화를 하려면, IoC/DI를 이용해 서비스 추상화를 용이하게 할 수 있습니다. applicationContext.xml을 통해 서비스 추상화를 구현합니다. 이때 중요한 것은 높은 응집도와 낮은 결합도를 준수하는 것입니다. 이것이 핵심입니다.

서비스 추상화와 단일 책임 원칙
트랜잭션의 추상화는 애플리케이션의 비즈니스 로직과 그 하위에서 동작하는 로우레벨의 트랜잭션 기술이라는 아예 다른 계층의 특성을 갖는 코드를 분리한 것입니다

UserService -> UserDao 애플리케이션 계층
TransactionManagger -> DataSource 서비스 추상화 계층
JDBC, JTA, JNDI, WAS, Database .. 기술 서비스 계층
이렇게 애플리케이션 로직의 종류에 따른 수평적인 구분이든, 로직과 기술이라는 수직적인 구분이든 모두 결합도가 낮으며 서로 영향을 주지 않고 자유롭게 확장될 수 있는 구조를 만들 수 있는 데는 스프링의 DI 가 중요한 역할을 하고 있습니다.

단일 책임 원칙
Single Responsibility Principle

단일 책임 원칙은 하나의 모듈은 한 가지 책임을 가져야 한다는 의미입니다. 하나의 모듈이 바뀌는 이유는 한 가지여야 한다고 설명할 수 있습니다. UserService 에 JDBC 의 Connection 메소드를 직접 사용하는 트랜잭션 코드가 들어 있었을 때는 사용자 레벨을 어떻게 관리할 것인가와 트랜잭션을 어떻게 관리할 것인가 하는 두 가지 책임을 가지고 있었지만 트랜잭션 서비스의 추상화 방식을 도입하고 이를 DI 를 통해 외부에서 제어하도록 만들고 나서는 단일 책임을 가지게 되었습니다.

단일 책임 원칙의 장점
적절하게 책임과 관심이 다른 코드를 분리하고, 서로 영향을 주지 않도록 다양한 추상화 기법을 도입하고 애플리케이션 로직과 기술/환경을 분리하는 등의 작업을 통해 어떤 변경이 필요할 대 수정 대상이 명확해집니다.

단일 책임 원칙을 잘 지키는 코드를 만들기 위해 인터페이스를 도입하고 이를 스프링이 제공하는 DI 로 연결하였고 그로 인해 개방 패쇄 원칙도 잘 지키고 모듈 간에 결합도가 낮아서 서로의 변경이 영향을 주지 않고, 같은 이유로 변경이 단일 책임에 집중되는 응집도가 높은 코드가 나오게 되었습니다. 스프링의 DI 는 스프링을 DI 프레임워크라고 불릴 만큼 모든 스프링 기술의 기반이 핵심엔진입니다.



출처: http://happygrammer.tistory.com/61 [해피그래머의 개발 노트]

* Transaction : DB의 상태를 변화시키기 위해 수행하는 작업의 단위를 말한다.
	작업의 단위는 많은 질의어 명령문들을 사람이 정하는 기준에 따라 정하는 것이다.
	트랜젝션이 db에 모두 반영되던가 아니면 전혀 반영되지 안하야 한다. 또한 작업 처리 결과가 항상 일관성 있어야 하며 어느 하나의 트랜잭션이라도 다른 트랜잭션의 연산에 끼어들 수 없다. 또한 트랜잭션이 성공적으로 완료되었을 경우 결과는 영구적으로 반여되어야 한다.



해야할 것 )
1. 180207.txt 2번 스터디 - 메일
2. 인증, 보안
3. 인증 AOP 하기 전에 회원가입, 로그인 페이지 먼저 만들기 -> 메일을 보내서 받고 링크를 클릭하면 본인이 맞는 것으로(제일 간단)
