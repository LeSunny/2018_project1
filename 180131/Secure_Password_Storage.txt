http://d2.naver.com/helloworld/318732

<단방향 해시함수>
수학적 연산을 통해 원본 메시지를 변환하여 암호화된 메시지인 다이제스트를 생성한다. 원본 메시지를 알면 암호화된 메시지를 구하기는 쉽지만 암호화된 메시지로는 원본 메시지를 구할 수 없어야 한다.

<단방향 해시함수의 문제점>
1. 인식가능성 recognizability
동일한 메시지가 언제나 동일한 다이제스트를 갖을 때, 공격자는 전처리(pre-computing)된 다이제스트를 가능한 한 많이 확보한 뒤 탈취한 다이제스트와 비교해 원본 메시지를 찾아내거나 동일한 효과의 메시지를 찾을 수 있다.
이와 같은 다이제스트 목록을 rainbow table이라 하고 이 같은 공격을 rainbow attack이라 한다.

2. 속도 Speed
해시 함수 자체는 원래 짧은 시간에 데이터를 검색하기 위해 설계된 것이다. 해시 함수의 빠른 처리 속도로 인해 공격자는 매우 빠른 속도로 임의의 문자열의 다이제스트와 해킹할 대상의 다이제스트를 비교할 수 있다.
이런 방식으로 패스워드를 추측하면 패스워드가 충분히 길거나 복잡하지 않을 때 그리 긴 시간이 걸리지 않는다.
사용자는 웹사이트에서 패스워드를 인증하는데 걸리는 시간에는 그리 민감하지 않다. (사용자가 로그인하기 위해 아이디와 패스워드를 입력하고 확인버튼을 누르는 과정) 즉, 해시함수의 빠른 처리 속도는 사용자들보다 공격자들에게 더 큰 편의성을 제공한다.

<단방향 해시함수 보완하기>
- Salting
원본 메시지에 문자열을 추가하여 다이제스트를 생성하는 것을 salting이라 한다.
SALT + PASSWORD --(Hash function)--> DIGEST
모든 패스워드가 고유의 솔트를 갖고 솔트의 길이는 32바이트 이상이어야 솔트아 다이제스트를 추측하기 어렵다.
- Key stretching
입력한 패스워드의 다이제스트를 입력값으로 다이제스트를 반복적으로 생성하는 방법, 이렇게 하면 입력한 패스워드를 동일한 횟수만큼 해시해야만 입력한 패스워드의 일치 여부를 확인할 수 있다. 이것이 기본적인 키 스트레칭 과정이다.
 잘 설계된 패스워드 저장 시스템에서는 억지기법(brute-force attack)으로 패스워드를 추측하는데 많은 시간이 소요되도록 하기 위해 하나의 다이제스트를 생성할 때 어느정도의 시간(일반적인 장비에서 0.2초 이상)이 소요되도록 한다.
 최근엔 일반적인 장비로 1초에 50억 개 이상의 다이제스트를 비교할 수 있지만, 키 스트레칭을 적용하여 동일한 장비에서 1초에 5번 정도만 비교할 수 있게 한다. GPU(Graphics Processing Unit)를 사용하더라도 수백번에서 수천 번 정도만 비교할 수 있다. 


* Adaptive Key Derivation Functions
다이제스트 생성 시 솔팅과 키 스트레칭을 반복하며 솔트와 패스워드 외에도 입력값을 추가한다.
이 함수들은 GPU와 같은 장비를 이용한 병렬화를 어렵게 하는 기능을 제공한다. 
adaptive key derivation function 중 주요한 key derivation function은 다음과 같다.

-PBKDF2(Password-Based Key Derivation Function)
가장 많이 사용되는 key derivation function이다. 해시 함수의 컨테이너인 PBKDF2는 솔트를 적용하고 해시 함수의 반복 횟수를 임의로 선택할 수 있다. 아주 가볍고 구현하기 쉬우며 SHA와 같이 검증된 해시 함수만을 사용한다.

PBKDF2의 기본 파라미터는 다음과 같은 5개 파라미터다.
DIGEST = PBKDF2(PRF, Password, Salt, c, DLen)  

PRF: 난수(예: HMAC)
Password: 패스워드
Salt: 암호학 솔트
c: 원하는 iteration 반복 수
DLen: 원하는 다이제스트 길이

ISO-27001의 보안 규정을 준수하고, 서드파티의 라이브러리에 의존하지 않으면서 사용자 패스워드의 다이제스트를 생성하려면 PBKDF2-HMAC-SHA-256/SHA-512을 사용하면 된다.

-bcrypt
패스워드 저장을 목적으로 설계된 현재까지 사용되는 가장 강력한 해시 매커니즘 중 하나이다. bcrypt의 "work factor" 인자는 하나의 해시 다이제스트를 생성할 때 얼마만큼의 처리 과정을 수행할지 결정하며 이것을 조정하는 것 만으로도 간단히 시스템의 보안성을 높일 수 있다.
다만 PBKDF2나 scrypt와는 다르게 bcrypt는 입력값으로 72 bytes character를 사용해야 하는 제약이 있다.

/ Sample code for jBCrypt is a Java
// gensalt is work factor and the default is 10
String hashed = BCrypt.hashpw(password, BCrypt.gensalt(11));

// Check that an unencrypted password matches one that has
// previously been hashed
if (BCrypt.checkpw(candidate, hashed))  
    System.out.println("It matches");
else  
    System.out.println("It does not match");

매우 강력한 패스워드 다이제스트를 생성하는 시스템을 쉽게 구현하고 싶다면 bcrypt를 사용하는 것이 좋다. 대부분의 프로그래밍 언어에서 라이브러리를 사용할 수 있고, 검색 엔진에서 "bcrypt <프로그래밍 언어>"로 검색하면 쉽게 예제를 구할 수 있다.

-scrypt
PBKDF2와 유사한 adaptive key derivation function이며 다이제스트를 생성할 때 메모리 오버헤드를 갖도록 설계되어 억지기법을 시도할 때 병렬화 처리가 매우 어렵다. 따라서 PBKDF2보다 안전하다고 평가되며 미래에 bcrypt보다 경쟁력이 있다 여겨진다. 또한 scrypt는 여러 프로그래밍 언어의 라이브러리로 제공받을 수 있다.

scrypt의 파라미터는 다음과 같은 6개 파라미터다.
DIGEST = scrypt(Password, Salt, N, r, p, DLen) 
 
Password: 패스워드
Salt: 암호학 솔트
N: CPU 비용
r: 메모리 비용
p: 병렬화(parallelization)
DLen: 원하는 다이제스트 길이

구현하려는 시스템이 매우 민감한 정보를 다루고, 보안 시스템을 구현하는 데 많은 비용을 투자할 수 있다면 scrypt를 사용하면 된다.